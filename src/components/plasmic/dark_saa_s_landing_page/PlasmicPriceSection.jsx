// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rLrDorgW4H68uT1ExgAqds
// Component: AqO5lSyONueu
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import PriceCard from "../../PriceCard"; // plasmic-import: t9snlSxS5y7K/component
import { useScreenVariants as useScreenVariants_6WiTVi5Y } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6wi-tVI5y__-/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: rLrDorgW4H68uT1ExgAqds/projectcss
import sty from "./PlasmicPriceSection.module.css"; // plasmic-import: AqO5lSyONueu/css

createPlasmicElementProxy;

export const PlasmicPriceSection__VariantProps = new Array();

export const PlasmicPriceSection__ArgProps = new Array();

const $$ = {};

function PlasmicPriceSection__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6WiTVi5Y()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__kbQa3)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__wbqBw)}>
          <PriceCard
            borders={["flatLeft"]}
            className={classNames("__wab_instance", sty.priceCard__uDmrh)}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__fqb7I)}>
          <div className={classNames(projectcss.all, sty.freeBox__sJpdE)}>
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"We Recommended"}
            </div>
          </div>
          <PriceCard
            borders={["flatCenter"]}
            className={classNames("__wab_instance", sty.priceCard__odUse)}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__kwntH)}>
          <PriceCard
            borders={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? ["flatRight"]
                : ["flatRight"]
            }
            className={classNames("__wab_instance", sty.priceCard__xgp6O)}
          />
        </div>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPriceSection__ArgProps,
          internalVariantPropNames: PlasmicPriceSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPriceSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPriceSection";
  } else {
    func.displayName = `PlasmicPriceSection.${nodeName}`;
  }
  return func;
}

export const PlasmicPriceSection = Object.assign(
  // Top-level PlasmicPriceSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicPriceSection
    internalVariantProps: PlasmicPriceSection__VariantProps,
    internalArgProps: PlasmicPriceSection__ArgProps
  }
);

export default PlasmicPriceSection;
/* prettier-ignore-end */
